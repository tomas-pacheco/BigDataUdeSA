{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "cZF5tpo61XQZ"
   },
   "source": [
    "# Big Data y Machine Learning (UBA) 2025\n",
    "## Tutorial 16 - CART: Árboles de regresión y clasificación \n",
    "\n",
    "**Objetivo:**  \n",
    "Que se familiaricen con los arboles de decisión para regresión y clasificación\n",
    "\n",
    "### Temario:\n",
    "- Árbol de decisión y clasificación\n",
    "- Ejemplo práctico con base de Titanic para predecir sobrevivientes: https://www.kaggle.com/dmilla/introduction-to-decision-trees-titanic-dataset\n",
    "- Ejemplo práctico con la base de Hitters para predecir salarios"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "LIIk2TrO1XQc"
   },
   "source": [
    "## ¿Qué es un árbol de decisiones? ¿Cómo funciona?\n",
    "El árbol de decisiones es un tipo de algoritmo de **aprendizaje supervisado** (que tiene una variable objetivo predefinida) que se utiliza para problemas de **clasificación y de regresión**. Funciona para variables tanto categóricas como continuas. \n",
    "\n",
    "En esta técnica, el objetivo es dividir a la población o muestra en dos o más conjuntos (o subpoblaciones) homogéneos en función del atributo más significativo en las variables x. Entonces la pureza del nodo aumenta con respecto a la variable objetivo. El árbol de decisión divide los nodos en todas las variables disponibles y luego selecciona la división que da como resultado los subnodos más homogéneos.\n",
    "\n",
    "### Tipos de árboles de decisión\n",
    "Los tipos de árbol de decisión se basan en el tipo de variable objetivo que tenemos. Puede ser de dos tipos:\n",
    "\n",
    "**1. Árbol de decisión de variable categórica:** Árbol de decisión que tiene una variable de destino categórica y luego se llama como árbol de decisión de variable categórica. Ejemplo: Titanic\n",
    "\n",
    "**2. Árbol de decisión de variable continua:** El árbol de decisión tiene una variable de destino continua, por lo que se denomina Árbol de decisión de variable continua. Ejemplo: Hitters\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "MG8NaLVS1XQd"
   },
   "source": [
    "### Terminología importante relacionada con los árboles de decisión\n",
    "Veamos la terminología básica utilizada con los árboles de decisión:\n",
    "\n",
    "**1.Nodo Base/Raíz (RootNode):** Es el primer nodo. Representa la muestra completa y esto se divide en dos o más conjuntos homogéneos.\n",
    "\n",
    "**2.Dividir (Splitting):** Es un proceso de dividir un nodo en dos o más subnodos.\n",
    "\n",
    "**3.Nodo interno o nodo de decisión (Decision Node):** Cuando un subnodo se divide en otros subnodos, se denomina nodo interno o nodo de decisión.\n",
    "\n",
    "**4. Nodo Terminal/Hojas:** Los nodos que no se dividen se denominan Hoja o nodo Terminal.\n",
    "\n",
    "**5.Poda (Pruning):** Cuando eliminamos subnodos de un nodo de decisión, este proceso se llama poda. Es decir, el proceso opuesto de la división.\n",
    "\n",
    "**6 Rama/Subárbol:** Una subsección de todo el árbol se llama rama o subárbol.\n",
    "\n",
    "**7.Nodo padre e hijo:** Un nodo, que se divide en subnodos, se denomina nodo padre de subnodos, donde los subnodos son los hijos del nodo padre."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En el ejemplo de la base Hitters"
   ]
  },
  {
   "attachments": {
    "Tree_Hitters.JPG": {
     "image/jpeg": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Tree_Hitters.JPG](attachment:Tree_Hitters.JPG)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Odk2lcYM1XQe"
   },
   "source": [
    "\n",
    "## Ventajas\n",
    "* **No lineal:** Los árboles son una forma inteligente de representar las no linealidades\n",
    "\n",
    "* **Fácil de entender y comunicar:** La salida del árbol de decisiones es muy fácil de entender. No requiere ningún conocimiento estadístico.\n",
    "\n",
    "* **Útil en la exploración de datos:** es la forma más rápida de identificar variables significativas (las de los nodos de más arriba). Con los árboles de decisión podemos crear nuevas variables/ características que tienen mejor poder para predecir la variable objetivo.\n",
    "\n",
    "* **El tipo de datos no es una restricción:** Puede manejar variables tanto numéricas como categóricas\n",
    "\n",
    "## Desventajas\n",
    "\n",
    "* **Ajuste excesivo:** El ajuste excesivo es una de las dificultades más prácticas para el modelo de árbol de decisión. Este problema se resuelve estableciendo restricciones en los parámetros del modelo.\n",
    "\n",
    "* **Estructura lineal:** Cuando la estructura de los datos es lineal, el arbol no anda bien, porque las variables importan siempre y con cart solo algunas variables importan en cada nodo. \n",
    "\n",
    "* **Poco robusto:** Cambios en la base puede generar grandes cambios en el arbol resultante"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "TRiltndx1XQe"
   },
   "source": [
    "## Ejercicio: Árbol de decisiones sobre datos del Titanic\n",
    "En este ejercicio veremos los árboles de decisión utilizando el conjunto de datos Titanic:\n",
    "1. Aprender a predecir a los sobrevivientes con árboles de decisión\n",
    "2. Exploración y procesamiento de conjuntos de datos\n",
    "3. Funciones relevantes para los árboles de decisión\n",
    "4. Impureza de Gini\n",
    "5. Encontrar la mejor profundidad de árbol con la ayuda de la validación cruzada\n",
    "6. Generación y visualización del modelo final\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "|Variable|Definition|Key|\n",
    "| --- | --- | --- |\n",
    "|Survival|Survival|0 = No, 1 = Yes|\n",
    "|Pclass|Ticket class|1 = 1st, 2 = 2nd, 3 = 3rd|\n",
    "|Sex|Sex||\n",
    "|Age|Age in years||\n",
    "|Sibsp|| # of siblings / spouses aboard the Titanic\t\n",
    "|Parch|| # of parents / children aboard the Titanic\t\n",
    "|Ticket|Ticket number||\n",
    "|Fare|Passenger fare||\n",
    "|Cabin|Cabin number||\n",
    "|Embarked|Port of Embarkation|C = Cherbourg, Q = Queenstown, S = Southampton|\n",
    "\n",
    "\n",
    "Fuente: [Kaggle](https://www.kaggle.com/c/titanic/data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "zTA9rxMv1XQf"
   },
   "source": [
    "### Limpieza de la base de datos del Titanic "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "id": "XH_nx_Cn1XQf"
   },
   "outputs": [],
   "source": [
    "# (Si aún no instalaron alguna librería recuerden primero hacer ese paso)\n",
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import re\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "from sklearn.tree import DecisionTreeClassifier, plot_tree\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.model_selection import KFold, GridSearchCV\n",
    "from sklearn.model_selection import cross_val_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "id": "wm2HIWmL1XQg",
    "outputId": "b76392a0-1027-43d0-b9c1-3c33e1454a73"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    object \n",
      " 5   Age          714 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        204 non-null    object \n",
      " 11  Embarked     889 non-null    object \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.7+ KB\n",
      "None\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Cargamos los datos \n",
    "train = pd.read_csv('train.csv')\n",
    "test = pd.read_csv('test.csv')\n",
    "\n",
    "# Guardamos el ID de los pasajeros del grupo a predecir \n",
    "passenger_id = test['PassengerId']\n",
    "\n",
    "original_train = train.copy()\n",
    "\n",
    "# Info del df\n",
    "print(train.info())\n",
    "#print(test.info())\n",
    "# Miramos las primeras filas del df\n",
    "train.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A continuación queremos generar una función que nos extraiga el título de la persona. Por ejemplo, el título de `Braund, Mr. Owen Harris` sería `Mr`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "id": "S_ntRUTs1XQi"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<>:7: SyntaxWarning: invalid escape sequence '\\.'\n",
      "<>:7: SyntaxWarning: invalid escape sequence '\\.'\n",
      "/var/folders/s3/z1fnt3zs2nqd6lpnmt4yj7kh0000gn/T/ipykernel_4594/2479974994.py:7: SyntaxWarning: invalid escape sequence '\\.'\n",
      "  title_search = re.search(' ([A-Za-z]+)\\.', name)\n"
     ]
    }
   ],
   "source": [
    "# Definir función para extraer los 'titles' de los nombres de los pasajeros\n",
    "def get_title(name):\n",
    "    '''\n",
    "    input: nombres de los pasajeros, incluyendo el title\n",
    "    return: title\n",
    "    '''\n",
    "    title_search = re.search(' ([A-Za-z]+)\\.', name)\n",
    "    if title_search:\n",
    "        return title_search.group(1)\n",
    "    return \"\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "La función anterior usa algo que se llaman expresiones regulares para buscar texto. El uso de expresiones regulares es algo que solía ser bastante complicado y requerir bastante estudio, pero ahora, con la ayuda de los LLMs, la cosa se hizo mucho más fácil. Por ejemplo: Si están usando VSCode usen _Generate_ de copilot con un prompt que diga algo como \"create a function, called get_title, that extracts the word right before the first dot in a string\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "id": "2hsgF2qJ1XQi",
    "outputId": "75b66734-59e3-421d-8db8-5f635def55ae"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Mr'"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Ejemplo\n",
    "get_title(train.Name[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Braund, Mr. Owen Harris'"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.Name[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A continuación vamos a crear nuevas columnas con el dataset que contengan información relevante (lo pueden ver en detalle en sus casas).\n",
    "\n",
    "Vamos a hacer varias cosas:\n",
    "* Calcular el tamaño de la familia.\n",
    "* Crear una nueva columna llamada `Has_cabin` que tiene un 0 si `Cabin` es `NaN` y un 1 si no.\n",
    "* Completar los _missing values_ de `Embarked` con `S` (el valor más común).\n",
    "* Completar los _missing values_ de `Fare` con su mediana.\n",
    "* Completar los _missing values_ de `Age` con un valor aleatorio entre la media +/- 1 SD.\n",
    "* Obtener el título y reemplazar los raros (como `Countess`) por `Rare`.\n",
    "* Convertir la variable `Age` en numérica.\n",
    "* Generar dummies para `Title` y `Embarked`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "id": "KKly44mb1XQj"
   },
   "outputs": [],
   "source": [
    "dummies_train_df = []\n",
    "dummies_test_df = []\n",
    "\n",
    "for dataset in [train, test]:\n",
    "    # Tamaño de la familia\n",
    "    dataset['Family_Size'] = dataset['SibSp'] + dataset['Parch'] + 1\n",
    "    # Viaja solo?\n",
    "    dataset['Alone'] = 0\n",
    "    dataset.loc[dataset['Family_Size'] == 1, 'Alone'] = 1\n",
    "    # Tiene cabina?\n",
    "    dataset['Has_Cabin'] = dataset[\"Cabin\"].apply(lambda x: 0 if type(x) == float else 1)\n",
    "    # Reemplazamos los missings en Embarked con la opción más común #train.groupby(['Embarked']).count()\n",
    "    dataset['Embarked'] = dataset['Embarked'].fillna('S')\n",
    "    # Reemplazamos los missings en Fare con la mediana\n",
    "    dataset['Fare'] = dataset['Fare'].fillna(train['Fare'].median())\n",
    "    \n",
    "    # Imputamos los nulls en la edad con valores aleatorios entre la media +- 1 SD\n",
    "    age_avg = dataset['Age'].mean()\n",
    "    age_std = dataset['Age'].std()\n",
    "    age_null_count = dataset['Age'].isnull().sum()\n",
    "    age_null_random_list = np.random.randint(age_avg - age_std, age_avg + age_std, size=age_null_count)\n",
    "    dataset.loc[np.isnan(dataset['Age']), 'Age'] = age_null_random_list\n",
    "    dataset['Age'] = dataset['Age'].astype(int)\n",
    "    \n",
    "    # Nueva columna con titles\n",
    "    dataset['Title'] = dataset['Name'].apply(get_title)\n",
    "    # Agrupamos los títulos menos comunes\n",
    "    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'],\n",
    "                                                'Rare')\n",
    "    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n",
    "    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n",
    "    dataset['Title'] = dataset['Title'].replace('Ms', 'Mr') \n",
    "   \n",
    "    # Convertimos Sex en numerica\n",
    "    dataset['Male'] = dataset['Sex'].map( {'female': 0, 'male': 1} ).astype(int)\n",
    "    \n",
    "    if dataset is train:\n",
    "        # Convertimos Title en dummies  \n",
    "        titles_train = pd.get_dummies(train['Title'], drop_first=True)\n",
    "        dummies_train_df.append(titles_train)\n",
    "        # Convertimos Embarked en dummies\n",
    "        embarked_train = pd.get_dummies(train['Embarked'], drop_first=True)\n",
    "        dummies_train_df.append(embarked_train)\n",
    "    else:\n",
    "        # Convertimos Title en dummies    \n",
    "        titles_test = pd.get_dummies(test['Title'], drop_first=True)\n",
    "        dummies_test_df.append(titles_test)\n",
    "        # Convertimos Embarked en dummies        \n",
    "        embarked_test = pd.get_dummies(test['Embarked'], drop_first=True)\n",
    "        dummies_test_df.append(embarked_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[      Miss     Mr    Mrs   Rare\n",
       " 0    False   True  False  False\n",
       " 1    False  False   True  False\n",
       " 2     True  False  False  False\n",
       " 3    False  False   True  False\n",
       " 4    False   True  False  False\n",
       " ..     ...    ...    ...    ...\n",
       " 886  False  False  False   True\n",
       " 887   True  False  False  False\n",
       " 888   True  False  False  False\n",
       " 889  False   True  False  False\n",
       " 890  False   True  False  False\n",
       " \n",
       " [891 rows x 4 columns],\n",
       "          Q      S\n",
       " 0    False   True\n",
       " 1    False  False\n",
       " 2    False   True\n",
       " 3    False   True\n",
       " 4    False   True\n",
       " ..     ...    ...\n",
       " 886  False   True\n",
       " 887  False   True\n",
       " 888  False   True\n",
       " 889  False  False\n",
       " 890   True  False\n",
       " \n",
       " [891 rows x 2 columns]]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dummies_train_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Eliminamos variables irrelevantes y unimos con las tablas de dummies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "id": "S-gBn1DN1XQj",
    "outputId": "889428c8-c8cf-410f-90e2-985b1a99f6b2"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>survived</th>\n",
       "      <th>pclass</th>\n",
       "      <th>age</th>\n",
       "      <th>fare</th>\n",
       "      <th>family_size</th>\n",
       "      <th>alone</th>\n",
       "      <th>has_cabin</th>\n",
       "      <th>male</th>\n",
       "      <th>miss</th>\n",
       "      <th>mr</th>\n",
       "      <th>mrs</th>\n",
       "      <th>rare</th>\n",
       "      <th>q</th>\n",
       "      <th>s</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>22</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>38</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>26</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>35</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>35</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   survived  pclass  age     fare  family_size  alone  has_cabin  male   miss  \\\n",
       "0         0       3   22   7.2500            2      0          0     1  False   \n",
       "1         1       1   38  71.2833            2      0          1     0  False   \n",
       "2         1       3   26   7.9250            1      1          0     0   True   \n",
       "3         1       1   35  53.1000            2      0          1     0  False   \n",
       "4         0       3   35   8.0500            1      1          0     1  False   \n",
       "\n",
       "      mr    mrs   rare      q      s  \n",
       "0   True  False  False  False   True  \n",
       "1  False   True  False  False  False  \n",
       "2  False  False  False  False   True  \n",
       "3  False   True  False  False   True  \n",
       "4   True  False  False  False   True  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Decidí eliminar 'Mr' porque en el heatmap observé que estaba altísimamente correlacionado con sexo.\n",
    "drop_elements = ['PassengerId', 'Name', 'Sex', 'Ticket', 'Cabin', 'Parch', 'SibSp', 'Embarked', 'Title']\n",
    "\n",
    "train = pd.concat([train, dummies_train_df[0], dummies_train_df[1]], axis=1)\n",
    "train = train.drop(drop_elements, axis = 1)\n",
    "train.columns = train.columns.str.lower()\n",
    "\n",
    "test = pd.concat([test, dummies_test_df[0], dummies_test_df[1]], axis=1)\n",
    "test = test.drop(drop_elements, axis = 1)\n",
    "test.columns = test.columns.str.lower()\n",
    "\n",
    "train.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "id": "-OVDbsIG1XQk",
    "outputId": "a7e9d0dd-9505-4186-dc65-c9a8ba9f5ef3"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pclass</th>\n",
       "      <th>age</th>\n",
       "      <th>fare</th>\n",
       "      <th>family_size</th>\n",
       "      <th>alone</th>\n",
       "      <th>has_cabin</th>\n",
       "      <th>male</th>\n",
       "      <th>miss</th>\n",
       "      <th>mr</th>\n",
       "      <th>mrs</th>\n",
       "      <th>rare</th>\n",
       "      <th>q</th>\n",
       "      <th>s</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>34</td>\n",
       "      <td>7.8292</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>47</td>\n",
       "      <td>7.0000</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>62</td>\n",
       "      <td>9.6875</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>27</td>\n",
       "      <td>8.6625</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>22</td>\n",
       "      <td>12.2875</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   pclass  age     fare  family_size  alone  has_cabin  male   miss     mr  \\\n",
       "0       3   34   7.8292            1      1          0     1  False   True   \n",
       "1       3   47   7.0000            2      0          0     0  False  False   \n",
       "2       2   62   9.6875            1      1          0     1  False   True   \n",
       "3       3   27   8.6625            1      1          0     1  False   True   \n",
       "4       3   22  12.2875            3      0          0     0  False  False   \n",
       "\n",
       "     mrs   rare      q      s  \n",
       "0  False  False   True  False  \n",
       "1   True  False  False   True  \n",
       "2  False  False   True  False  \n",
       "3  False  False  False   True  \n",
       "4   True  False  False   True  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Probamos que no hayan quedado missing values:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "id": "ZqOxu4c11XQk"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Columns with NaN values: []\n",
      "Columns with NaN values: []\n"
     ]
    }
   ],
   "source": [
    "# Probamos que no hayan quedado missing values:\n",
    "columns_with_nan = train.columns[train.isna().any()].tolist()\n",
    "print(\"Columns with NaN values:\", columns_with_nan)\n",
    "columns_with_nan = test.columns[test.isna().any()].tolist()\n",
    "print(\"Columns with NaN values:\", columns_with_nan)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "GDv88h9u1XQk"
   },
   "source": [
    "## Visualización de la base procesada"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ARV4arne1XQl"
   },
   "source": [
    "### Heatmap\n",
    "Este mapa de calor es muy útil como observación inicial porque permite hacerse una idea del valor predictivo de cada feature. El valor del mapa de calor se sitúa entre (-1,0) y (0,1). A medida que aumenta el valor (en términos absolutos), aumenta la correlación entre los atributos."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "id": "ceT7kUuH1XQl",
    "outputId": "a27dfbe6-4706-4e37-a24f-747f642a80d5"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: title={'center': 'Correlacion de Pearson entre las Xs'}>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x1200 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "colormap = plt.cm.viridis\n",
    "plt.figure(figsize=(12,12))\n",
    "plt.title('Correlacion de Pearson entre las Xs', y=1.05, size=15)\n",
    "sns.heatmap(train.astype(float).corr(),\n",
    "            linewidths=0.1,\n",
    "            vmax=1.0, \n",
    "            square=True, \n",
    "            cmap=colormap, \n",
    "            linecolor='white', \n",
    "            annot=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "UdxLnfSH1XQl"
   },
   "source": [
    "### ¿Cómo decide un árbol dónde dividirse?\n",
    "Los árboles de decisión utilizan distintos algoritmos para decidir cómo dividir un nodo en dos o más subnodos. La creación de subnodos aumenta la homogeneidad de los subnodos resultantes. En otras palabras, podemos decir que la pureza del nodo aumenta con respecto a la variable objetivo. El árbol divide los nodos en todas las variables disponibles y luego selecciona la división que da como resultado los subnodos más homogéneos.\n",
    "\n",
    "\n",
    "#### Índice de Gini\n",
    "El Gini da una medida de la impureza de un nodo. Se calcula como:\n",
    "\n",
    "$Gini =  \\sum \\limits _{k=1} ^{K} \\hat{p}_{mk} (1-\\hat{p}_{mk}) $\n",
    "\n",
    "donde $\\hat{p}_{mk}$ es la proporción de observaciones que en el dataset de entrenamiento en la región m de la clase k. \n",
    "\n",
    "Por la forma en la que está construido este índice, su valor será menor cuando $\\hat{p}_{mk}$ se acerque a 1 o a 0 (es decir, cuando las observaciones del nodo son más parecidas). Cuanto menor sea el valor de Gini, menor será la desigualdad. Los árboles de decisión intentarán encontrar la división que reduzca más la Impureza de Gini en los dos nodos resultantes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "rnKoBwr_1XQl"
   },
   "outputs": [],
   "source": [
    "# Definimos la función de la impureza de Gini \n",
    "def get_gini_impurity(survived_count, total_count):\n",
    "    survival_prob = survived_count/total_count\n",
    "    not_survival_prob = (1 - survival_prob)\n",
    "    random_observation_survived_prob = survival_prob\n",
    "    random_observation_not_survived_prob = (1 - random_observation_survived_prob)\n",
    "    mislabelling_survived_prob = not_survival_prob * random_observation_survived_prob\n",
    "    mislabelling_not_survived_prob = survival_prob * random_observation_not_survived_prob\n",
    "    gini_impurity = mislabelling_survived_prob + mislabelling_not_survived_prob\n",
    "    return gini_impurity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "6pOu0tcG1XQl",
    "outputId": "c6eda6a3-ea4d-4dc0-b39b-3ce85494a1b5"
   },
   "outputs": [],
   "source": [
    "train.survived.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "y7gIGunw1XQm",
    "outputId": "a017876e-77aa-4b1c-a20d-a45a08b74579"
   },
   "outputs": [],
   "source": [
    "# Gini Impurity en nodo inicial\n",
    "survived = train.survived.value_counts()[1]\n",
    "total = len(train)\n",
    "gini_impurity_starting_node = get_gini_impurity(survived, total)\n",
    "gini_impurity_starting_node"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A mano:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "total = (549+342)\n",
    "suma_k0 = 549/total * (1 - 549/total)\n",
    "suma_k1 = 342/total * (1 - 342/total)\n",
    "gini_a_mano = suma_k0 + suma_k1\n",
    "gini_a_mano"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Veamos el promedio de los sobrevivientes entre hombres y mujeres:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "original_train[['Sex', 'Survived']].groupby(['Sex'], as_index=False).agg(['mean', 'count', 'sum'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Gini Impurity si hicieramos la partición según sexo\n",
    "gini_impurity_starting_node_male = get_gini_impurity(109, 577)\n",
    "gini_impurity_starting_node_female = get_gini_impurity(233, 314)\n",
    "print(gini_impurity_starting_node_male, gini_impurity_starting_node_female)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Árbol de decisión de clasificación"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Para estimar el modelo vamos a usar [DecisionTreeClassifier](https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html) de Scikit Learn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_accuracies = []\n",
    "\n",
    "X = train.drop(['survived'], axis=1)\n",
    "y = train[\"survived\"]       \n",
    "\n",
    "depth_range = range(1, 21)  # Esto es para probar con distintas \"profundidad de un arbol\"\n",
    "\n",
    "for depth in depth_range:\n",
    "    tree_model = DecisionTreeClassifier(max_depth=depth)\n",
    "    tree_model.fit(X, y)\n",
    "    \n",
    "    train_accuracy = tree_model.score(X, y)\n",
    "    \n",
    "    train_accuracies.append(train_accuracy)\n",
    "    \n",
    "# Plotting the accuracies\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(depth_range, train_accuracies, label='Train Accuracy', marker='o')\n",
    "plt.xlabel('Max Depth')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.title('Train Accuracy vs Max Depth')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Todo parece indicar que cuanto más profundidad tiene el árbol mejor. Miremos el árbol más grande que ajustamos:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creamos un arbol con max_depth = 21\n",
    "decision_tree = DecisionTreeClassifier(max_depth = 21).fit(X, y)\n",
    "\n",
    "# Gráfico\n",
    "fig = plt.figure(figsize=(35,28))\n",
    "graph = plot_tree(decision_tree,\n",
    "                  max_depth = 21,\n",
    "                  impurity = True,   #mostrar impurity\n",
    "                  feature_names = list(train.drop(['survived'], axis=1)),\n",
    "                  class_names = ['Died', 'Survived'],\n",
    "                  rounded = True, \n",
    "                  filled = True   #colorear los nodos p/ indicar la clase mayoritaria (p/ clasif.)\n",
    "                 )\n",
    "fig.savefig(\"Tree_titanic_21.pdf\",bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "¿Qué creen que puede estar pasando?\n",
    "\n",
    "Pues sí, estamos sobreajustando.\n",
    "\n",
    "Para sacarnos de encima este problema usaremos CV para elegir el hiperparámetro de la profundidad del árbol (`max_depth`). Este hiperparámetro determina el número máximo de atributos que consideran para cada predicción (siendo el máximo la cantidad de características Xs disponibles en el dataset)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "ORJ8JUHv1XQm"
   },
   "outputs": [],
   "source": [
    "X = train.drop(['survived'], axis=1)\n",
    "y = train[\"survived\"]       "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hagamos k-fold cross-validation para encontrar el valor del hiperparámetro `max_depth`. Hagamos un loop sobre los _splits_ a mano:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "YWk9rrB71XQm",
    "outputId": "d53e3ae3-aa12-48d1-d46e-e3fcc97a8a6d"
   },
   "outputs": [],
   "source": [
    "cv = KFold(n_splits=10, shuffle = True, random_state=1)            \n",
    "accuracies = []\n",
    "max_attributes = len(test.columns)\n",
    "depth_range = range(1, max_attributes + 1) # Recuerdan por qué +1?\n",
    "\n",
    "for depth in depth_range:\n",
    "    fold_accuracy = []\n",
    "    tree_model = DecisionTreeClassifier(max_depth = depth)\n",
    "    \n",
    "    for i, (train_index, valid_index) in enumerate(cv.split(X)):   \n",
    "        x_train, x_valid = X.loc[train_index], X.loc[valid_index] \n",
    "        y_train, y_valid = y.loc[train_index], y.loc[valid_index] \n",
    "    \n",
    "        model = tree_model.fit(x_train, y_train) \n",
    "        valid_acc = model.score(x_valid, y_valid)\n",
    "        fold_accuracy.append(valid_acc)\n",
    "\n",
    "    avg = sum(fold_accuracy)/len(fold_accuracy)\n",
    "    accuracies.append(avg)\n",
    "    \n",
    "df = pd.DataFrame({\"Max Depth\": depth_range, \"Average Accuracy\": accuracies})\n",
    "df = df[[\"Max Depth\", \"Average Accuracy\"]]\n",
    "print(df.to_string(index=False))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "max_index = np.argmax(df['Average Accuracy'])\n",
    "print(\"La mayor accuracy de cross validation es para max_depth \" + str(max_index + 1) + \", y vale \" + str(df['Average Accuracy'][max_index]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Podemos concluir que el hiperparámetro óptimo es max_depth=4. Estimamos el modelo final con ese hiperparámetro"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hagamos el mismo gridsearch pero con `GridSearchCV`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "tree_para = {'max_depth':depth_range, 'criterion':['gini']}\n",
    "tree_cv = GridSearchCV(DecisionTreeClassifier(), tree_para, cv=10, scoring='accuracy')\n",
    "tree_cv.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"Best Parameters:\", tree_cv.best_params_)\n",
    "print(\"Best Accuracy Score:\", tree_cv.best_score_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Da diferente el valor de _accuracy_ de CV. Podemos cambiar el valor de `random_state` más arriba y ver cómo cambia justamente el valor de la _accuracy_.\n",
    "\n",
    "Este tipo de selección del hiperparámetro que hace un árbol más chico puede considerarse una técnica de pre-prunning (diferente al prunning tradicional que aparece en el Tibshirani)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ahora que ya tenemos el valor del hiperparámetro ajustemos un árbol con todos los datos de _train_."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "id": "etxgDCd71XQm",
    "outputId": "7d16f74f-b224-4029-b7e9-7f574736a172",
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Creamos un arbol con max_depth = 4\n",
    "decision_tree = DecisionTreeClassifier(max_depth = 4).fit(x_train, y_train)\n",
    "\n",
    "# Datos de test\n",
    "test = test.dropna()  \n",
    "X_test = test\n",
    "\n",
    "# Gráfico\n",
    "fig = plt.figure(figsize=(35,28))\n",
    "graph = plot_tree(decision_tree,\n",
    "                  max_depth = 4,\n",
    "                  impurity = True,   #mostrar impurity\n",
    "                  feature_names = list(train.drop(['survived'], axis=1)),\n",
    "                  class_names = ['Died', 'Survived'],\n",
    "                  rounded = True, \n",
    "                  filled = True   #colorear los nodos p/ indicar la clase mayoritaria (p/ clasif.)\n",
    "                 )\n",
    "fig.savefig(\"Tree_titanic.pdf\",bbox_inches='tight')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En cada recuadro tenemos:\n",
    "1. splitting condition\n",
    "2. Gini impurity of the node\n",
    "3. Samples: cantidad de observaciones en el nodo\n",
    "4. Value: Cantidad de observaciones clasificadas como 'Died' y 'Survived'\n",
    "5. Class: etiqueta de cada nodo, lo que clasificamos en c/u. \n",
    "El color representa la clase y la saturación aumenta a medida que el Gini es menor (mayor % de observaciones clasificadas igual).\n",
    "\n",
    "Recordar: en un árbol de clasificación predecimos que una observación pertenece a la clase más recurrente dentro del nodo terminal al que pertenece (por ej., si para una observación determinada, la mayor parte de las observaciones del nodo al que pertenece son y=sobrevivió, para esa observación -y todas las de ese nodo- nuestra predicción será 'Sobrevivió')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "acc_decision_tree = decision_tree.score(x_train, y_train)\n",
    "acc_decision_tree"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Vamos a hacer la predicción sobre los datos de testeo. Acá deberíamos calcular la precisión del modelo final con la base de test. Pero como estamos trabajando con la base de datos de la competencia, la y_test no la hicieron pública. El **resultado final** a entregar en la competencia era la predicción de sobrevivientes sobre los ID de los pasajeros. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Predicción sobre los datos de test\n",
    "y_pred = decision_tree.predict(X_test)\n",
    "submission = pd.DataFrame({\"passengerId\": passenger_id, \"survived\": y_pred})\n",
    "submission.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Árboles de regresión"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "En este caso vamos a usar un árbol de regresión para predecir el salario de los jugadores de la MLB utilizando la, ya conocida, base de datos `Hitters`.\n",
    "\n",
    "En este caso no se minimiza el Gini sino en MSE pesado. Es decir, si definimos MSE como:\n",
    "\n",
    "\n",
    "$\\text{MSE}(N) = \\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\bar{y})^2$\n",
    "\n",
    "Cuando se propone una división, se calcula el MSE ponderado de los nodos izquierdo y derecho resultantes, con el objetivo de minimizar este MSE ponderado. La fórmula para el MSE ponderado de una división es:\n",
    "\n",
    "$\\text{MSE}_{\\text{split}} = \\frac{n_L}{n} \\cdot \\text{MSE}(N_L) + \\frac{n_R}{n} \\cdot \\text{MSE}(N_R)$\n",
    "\n",
    "Donde $\\text{MSE}(N_L)$ y $\\text{MSE}(N_L)$ son los valores MSE de los nodos  izquierdo y derecho, calculados de forma similar al MSE de un único nodo. $n=n_L+n_R$ es la cantidad de observaciones del nodo padre que se divide en un nodo de $n_L$ observaciones y uno de $n_R$ observaciones.\n",
    "\n",
    "Carguemos los datos y las librerías necesarias.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "hitters_data = pd.read_csv('Hitters.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cargamos los datos, los acomodamos y los separamos entre train y test:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Nos sacamos de encima los missings values\n",
    "hitters_data.dropna(inplace=True)\n",
    "\n",
    "# Separamos en X e y\n",
    "X = hitters_data.drop(['Salary'], axis=1)\n",
    "y = hitters_data['Salary']\n",
    "\n",
    "# Convertimos las variables categóricas en dummies (one hot encoding)\n",
    "X = pd.get_dummies(X, drop_first=True)\n",
    "\n",
    "# Separamos en train y test\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "\n",
    "# Miremos si está todo bien\n",
    "X_train.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ahora inicializamos el árbol de regresión:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "tree_regressor = DecisionTreeRegressor(random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hagamos algo parecido a lo que hicimos antes pero con el RMSE. Veamos cómo varían los errores de train y test a medida que aumentamos la complejidad del modelo."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_RMSE = []\n",
    "test_RMSE = []\n",
    "\n",
    "depth_range = range(1, 21)  # You can adjust the range as needed\n",
    "\n",
    "for depth in depth_range:\n",
    "    tree_model = DecisionTreeRegressor(max_depth=depth)\n",
    "    tree_model.fit(X_train, y_train)\n",
    "    \n",
    "    y_pred_train = tree_model.predict(X_train)\n",
    "    y_pred_test = tree_model.predict(X_test)\n",
    "\n",
    "    train_rmse = np.sqrt(mean_squared_error(y_train, y_pred_train))\n",
    "    test_rmse = np.sqrt(mean_squared_error(y_test, y_pred_test))\n",
    "    \n",
    "    train_RMSE.append(train_rmse)\n",
    "    test_RMSE.append(test_rmse)\n",
    "    \n",
    "# Plotting the accuracies\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(depth_range, train_RMSE, label='Train RMSE', marker='o')\n",
    "plt.plot(depth_range, test_RMSE, label='Test RMSE', marker='o')\n",
    "plt.xlabel('Max Depth')\n",
    "plt.ylabel('RMSE')\n",
    "plt.title('Train RMSE vs Max Depth')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "De nuevo es una buena idea hacer cross-validation.\n",
    "\n",
    "En este caso además de buscar el mejor valor de `max_depth`, vamos a hacer una grilla de búsqueda para otros hiperparámetros: \n",
    "- `min_samples_split`: minimo numero de particiones (splits) \n",
    "- `min_samples_leaf`: mínimo numero de nodos terminales (hojas/leaf) \n",
    "- `ccp_alpha`: costo minimo de complejidad para podar un arbol (en las slides 25 el $\\alpha$)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Definimos un rango de valores para los hiperparámetros\n",
    "param_grid = {\n",
    "    'max_depth': [None, 5, 10, 15],\n",
    "    'min_samples_split': [2, 10, 20],\n",
    "    'min_samples_leaf': [1, 5, 10],\n",
    "    'ccp_alpha': [0.0, 0.01, 0.1, 1.0]  # Cost Complexity Pruning parameter for post-pruning\n",
    "}\n",
    "\n",
    "# Usamos GridSearchCV para encontrar el mejor modelo\n",
    "grid_search = GridSearchCV(tree_regressor, param_grid, cv=5, scoring='neg_mean_squared_error')\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "# Extraemos el mejor modelo\n",
    "best_tree = grid_search.best_estimator_\n",
    "\n",
    "# Hacemos predicciones para evaluar el modelo\n",
    "y_pred_train = best_tree.predict(X_train)\n",
    "y_pred_test = best_tree.predict(X_test)\n",
    "\n",
    "train_mse = mean_squared_error(y_train, y_pred_train)\n",
    "test_mse = mean_squared_error(y_test, y_pred_test)\n",
    "\n",
    "print(f\"Mejores parámetros para el árbol de regresión: {grid_search.best_params_}\")\n",
    "print(f\"MSE de train: {train_mse:.4f}\")\n",
    "print(f\"MSE de test: {test_mse:.4f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Veamos cómo se ve este árbol:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Gráfico\n",
    "fig = plt.figure(figsize=(35,28))\n",
    "graph = plot_tree(best_tree,\n",
    "                  feature_names = list(X_train),\n",
    "                  rounded = True, \n",
    "                  filled = True   #colorear los nodos p/ indicar la clase mayoritaria (p/ clasif.)\n",
    "                 )\n",
    "fig.savefig(\"Hitters.pdf\",bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Tal vez les parezca un modelo simple, pero tengan en cuenta que con Ridge el MSE de test era Error 116135 y con Lasso 115610. La clase que viene vamos a ver cómo mejorar notablemente la performance de este modelo."
   ]
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "deepnote_notebook_id": "d5ae7e63-e621-4577-a068-a3fc5977a204",
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
